{"version":3,"sources":["components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","history","useHistory","location","pathname","className","to","jsx","Index","lazy","Articles","About","App","basename","process","fallback","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOA8BeA,EAzBA,WACb,IAAMC,EAAUC,cAEhB,OACE,gCACE,6BAAKD,EAAQE,SAASC,WACtB,sBAAKC,UAAU,QAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAT,mBACA,cAAC,IAAD,CAAMA,GAAG,cAAT,sBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,sBAGF,uBAAOC,KAAG,EAAV,kLCXAC,EAAQC,gBAAK,kBAAM,gCACnBC,EAAWD,gBAAK,kBAAM,gCACtBE,EAAQF,gBAAK,kBAAM,gCA4BVG,MA1Bf,WACE,OACE,eAAC,IAAD,CAAQC,SAAUC,GAAlB,UACE,sBAAKT,UAAU,MAAf,UACE,wBAAQA,UAAU,SAAlB,SACE,cAAC,EAAD,MAEF,8BACE,cAAC,WAAD,CAAUU,SAAU,4CAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,cAAC,IAAD,CAAOS,KAAK,gBAAgBC,UAAWR,IACvC,cAAC,IAAD,CAAOO,KAAK,SAASC,UAAWP,cAKxC,uBAAOJ,KAAG,EAAV,iFCbSY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eacc53ce.chunk.js","sourcesContent":["import { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport style from \"styled-jsx\";\n\nconst Header = () => {\n  const history = useHistory();\n\n  return (\n    <div>\n      <h1>{history.location.pathname}</h1>\n      <div className=\"links\">\n        <Link to=\"/\">Index</Link>\n        <Link to=\"/articles/0\">Articles</Link>\n        <Link to=\"/about\">About</Link>\n      </div>\n\n      <style jsx>{`\n        .links {\n          display: flex;\n        }\n        .links > a {\n          display: inline-flex;\n          margin-right: 10px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Header;\n","import { lazy, Suspense } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport style from \"styled-jsx\";\n\nconst Index = lazy(() => import(\"./pages/Index\"));\nconst Articles = lazy(() => import(\"./pages/Articles\"));\nconst About = lazy(() => import(\"./pages/About\"));\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <header className=\"header\">\n          <Header />\n        </header>\n        <div>\n          <Suspense fallback={<h3>loading...</h3>}>\n            <Switch>\n              <Route exact path=\"/\" component={Index} />\n              <Route path=\"/articles/:id\" component={Articles} />\n              <Route path=\"/about\" component={About} />\n            </Switch>\n          </Suspense>\n        </div>\n      </div>\n      <style jsx>{`\n        .header {\n          height: 20px;\n        }\n      `}</style>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}